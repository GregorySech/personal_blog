<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://gregorysech.github.io/personal_blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gregorysech.github.io/personal_blog/" rel="alternate" type="text/html" /><updated>2021-05-04T02:53:33-05:00</updated><id>https://gregorysech.github.io/personal_blog/feed.xml</id><title type="html">Gregory Sech</title><subtitle>Gregory Sech's blog with Jupyter Notebooks thanks to Fastpages.</subtitle><entry><title type="html">Usare Docker per sviluppare in Python con CUDA in PyCharm e/o Visual Studio Code</title><link href="https://gregorysech.github.io/personal_blog/docker/cuda/python/vscode/pycharm/tutorial/italiano/italian/2020/08/12/it-vscode-pycharm-docker-devbox.html" rel="alternate" type="text/html" title="Usare Docker per sviluppare in Python con CUDA in PyCharm e/o Visual Studio Code" /><published>2020-08-12T00:00:00-05:00</published><updated>2020-08-12T00:00:00-05:00</updated><id>https://gregorysech.github.io/personal_blog/docker/cuda/python/vscode/pycharm/tutorial/italiano/italian/2020/08/12/it-vscode-pycharm-docker-devbox</id><content type="html" xml:base="https://gregorysech.github.io/personal_blog/docker/cuda/python/vscode/pycharm/tutorial/italiano/italian/2020/08/12/it-vscode-pycharm-docker-devbox.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-08-12-it-vscode-pycharm-docker-devbox.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Introduzione&quot;&gt;Introduzione&lt;a class=&quot;anchor-link&quot; href=&quot;#Introduzione&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Mettere in piedi un ambiente di sviluppo non è facile se si è inesperti, specialmente se molte tecnologie che si stanno ancora imparando sono coinvolte.&lt;br /&gt;
Questo tutorial ti mostrerà come usare PyCharm o Visual Studio Code per usare una immagine Docker per sviluppare in Python con supporto a CUDA.&lt;/p&gt;
&lt;h3 id=&quot;Disclaimers&quot;&gt;Disclaimers&lt;a class=&quot;anchor-link&quot; href=&quot;#Disclaimers&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Durante la stesura del tutorial &lt;strong&gt;non sono stato in grado di usare CUDA con Docker in Windows 10 Home&lt;/strong&gt; (neanche con l'Insider build), quindi è stato pensato con &lt;strong&gt;Linux&lt;/strong&gt; in mente anche se non c'è praticamente nulla di specifico ad una singola piattaforma.&lt;/li&gt;
&lt;li&gt;Usare Docker come un interprete Python remoto in PyCharm è possibile solo con l'edizione Professional.&lt;/li&gt;
&lt;li&gt;Suppongo che &lt;a href=&quot;https://www.docker.com/get-started&quot;&gt;Docker&lt;/a&gt; sia già installato correttamente sulla tua macchina.&lt;/li&gt;
&lt;li&gt;Assumo anche che &lt;a href=&quot;https://developer.nvidia.com/cuda-toolkit&quot;&gt;CUDA&lt;/a&gt; sia già installato sulla tua macchina. Se stai ancora configurando la tua macchina con Linux e non hai voglia di spendere troppo tempo a fare ricerche consiglio fortemente la distribuzione &lt;a href=&quot;https://pop.system76.com/&quot;&gt;Pop!_OS&lt;/a&gt;. In &lt;a href=&quot;https://support.system76.com/articles/cuda/&quot;&gt;questo articolo&lt;/a&gt; viene spiegato come installare CUDA e cuDNN molto facilmente sulla loro piattaforma. Inoltre spiegano anche come installare i loro pacchetti su Ubuntu.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Struttura-del-progetto&quot;&gt;Struttura del progetto&lt;a class=&quot;anchor-link&quot; href=&quot;#Struttura-del-progetto&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Userò solamente 3 file in questo progettino:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un &lt;code&gt;Dockerfile&lt;/code&gt; per generare il container Docker.&lt;/li&gt;
&lt;li&gt;Un file &lt;code&gt;requirements.txt&lt;/code&gt; che conterrà le dipendenze Python del progetto.&lt;/li&gt;
&lt;li&gt;Uno script &lt;code&gt;run.py&lt;/code&gt; che contiene il codice da eseguire.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ovviamente il tuo progetto sarà più complesso, inoltre è probabile che userai un metodo differente per gestire le tue dipendenze o che vorrai usare &lt;code&gt;docker-compose&lt;/code&gt; ma queste sono complessità che sviano dall'obiettivo del tutorial.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Dockerfile&quot;&gt;Dockerfile&lt;a class=&quot;anchor-link&quot; href=&quot;#Dockerfile&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Per un articolo più specializzato su Docker ed i Dockerfile consiglio &lt;a href=&quot;https://medium.com/codingthesmartway-com-blog/docker-beginners-guide-part-1-images-containers-6f3507fffc98&quot;&gt;Docker Beginner's Guide&lt;/a&gt;.&lt;br /&gt;
Segue il &lt;code&gt;Dockerfile&lt;/code&gt; del progetto ed una spiegazione delle sue parti:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nvidia/cuda:10.2-devel&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Miniconda install copy-pasted from Miniconda&amp;#39;s own Dockerfile reachable &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# at: https://github.com/ContinuumIO/docker-images/blob/master/miniconda3/debian/Dockerfile&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; PATH /opt/conda/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; apt-get update --fix-missing &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    apt-get install -y wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    apt-get clean

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    /bin/bash ~/miniconda.sh -b -p /opt/conda &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    rm ~/miniconda.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    /opt/conda/bin/conda clean -tipsy &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;. /opt/conda/etc/profile.d/conda.sh&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;conda activate base&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    find /opt/conda/ -follow -type f -name &lt;span class=&quot;s1&quot;&gt;&amp;#39;*.a&amp;#39;&lt;/span&gt; -delete &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    find /opt/conda/ -follow -type f -name &lt;span class=&quot;s1&quot;&gt;&amp;#39;*.js.map&amp;#39;&lt;/span&gt; -delete &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    /opt/conda/bin/conda clean -afy

&lt;span class=&quot;c&quot;&gt;# Project setup&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /code&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt; requirements.txt .

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; pip install -r requirements.txt

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt; . .

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./run.py&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In parole povere un &lt;code&gt;Dockerfile&lt;/code&gt; descrive che procedura usare per generare un'immagine Docker che poi viene usata per creare un container.&lt;br /&gt;
Il nostro specifico &lt;code&gt;Dockerfile&lt;/code&gt; si basa sull'immagine &lt;code&gt;nvidia/cuda:10.2-devel&lt;/code&gt; che è resa &lt;a href=&quot;https://hub.docker.com/r/nvidia/cuda&quot;&gt;pubblicamente disponibile su DockerHub&lt;/a&gt; direttamente da NVIDIA.&lt;br /&gt;
&lt;code&gt;nvidia/cuda:10.2-devel&lt;/code&gt; è un'immagine di sviluppo con il toolkit CUDA versione 10.2 già installata.&lt;br /&gt;
A questo punto ci mancano gli strumenti necessari per lo sviluppo Python e preparare il nostro progetto.&lt;/p&gt;
&lt;p&gt;La sezione centrale del file contiene l'installazione di Miniconda3. Ho deciso di usare Miniconda al posto della classica installazione di Python perché è la mia piattaforma di riferimento per la maggior parte dei miei progetti.&lt;br /&gt;
Purtroppo stiamo usando &lt;strong&gt;nessuna&lt;/strong&gt; delle capacità di Miniconda quindi è un po' sprecato.&lt;br /&gt;
Sostituire Miniconda con un'installazione vanilla di Python nel &lt;code&gt;Dockerfile&lt;/code&gt; è lasciato al lettore come esercizio (ma nessuna paura, basta usare gli stessi comandi che useresti in una nuova installazione di Ubuntu).&lt;/p&gt;
&lt;p&gt;In fine nell'ultima sezione faremo il setup del nostro progetto, nello specifico installiamo le dipendenze necessarie e copiamo tutti i file del progetto nella cartella di lavoro dell'immagine.&lt;br /&gt;
Concludiamo specificando che comando va lanciato se non se ne specifica uno quando si chiama &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ora che il nostro &lt;code&gt;Dockerfile&lt;/code&gt; è pronto dobbiamo solo costruire l'immagine. Una volta che ci troviamo con la shell nella stessa cartella del &lt;code&gt;Dockerfile&lt;/code&gt; dobbiamo solo lanciare:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker build -t &amp;lt;image_name&amp;gt; .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Questo genererà l'immagine Docker come descritto da configurazione e le darà il nome &lt;code&gt;image_name&lt;/code&gt;. Se nel nome non è specificato nessun tag &lt;strong&gt;latest&lt;/strong&gt; verrà usato come default. Per specificare il tag basta scriverlo dopo i due punti (:).&lt;br /&gt;
Io userò il nome &lt;code&gt;pytorch-development-box&lt;/code&gt; per l'immagine.&lt;/p&gt;
&lt;h3 id=&quot;requirements.txt&quot;&gt;requirements.txt&lt;a class=&quot;anchor-link&quot; href=&quot;#requirements.txt&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Come dipendenze per il progetto userò PyTorch e Torchvision. Sono pacchetti che uso molto spesso e userò un metodo di PyTorch per verificare la disponibilità di CUDA.&lt;br /&gt;
Quindi il contenuto del mio file &lt;code&gt;requirements.txt&lt;/code&gt; è:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;torch
torchvision&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;run.py&quot;&gt;run.py&lt;a class=&quot;anchor-link&quot; href=&quot;#run.py&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Il mio script Python è molto semplice, verifico solo se CUDA è disponibile o meno.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch.cuda&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;CUDA is available :D&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;CUDA isn&amp;#39;t available :(&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Impostare-PyCharm&quot;&gt;Impostare PyCharm&lt;a class=&quot;anchor-link&quot; href=&quot;#Impostare-PyCharm&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Come da disclaimer faccio nuovamente presente che usare Docker come interprete Python remoto è possibile solo nell'edizione Professional di PyCharm.&lt;br /&gt;
Detto questo vediamo come configurarlo.&lt;/p&gt;
&lt;p&gt;Una volta creata l'immagine Docker apriamo la cartella del nostro progetto in PyCharm.&lt;br /&gt;
Dopodichè navighiamo &lt;strong&gt;File &amp;gt; Settings &amp;gt; Project &amp;gt; Python Interpreter&lt;/strong&gt;.&lt;br /&gt;
Dovresti vedere una schermata come questa:&lt;br /&gt;
&lt;img src=&quot;/personal_blog/images/copied_from_nb/images/pycharm-interpreter.png&quot; alt=&quot;Python Interpreter settings&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Ora facciamo click sull'ingranaggio in alto a destra ed aggiungiamo un nuovo interprete.&lt;br /&gt;
Qua dobbiamo selezionare &lt;strong&gt;Docker&lt;/strong&gt; e scegliere dal drop-down chiamato &lt;strong&gt;Image name&lt;/strong&gt; l'immagine che abbiamo creato in precedenza, così:
&lt;img src=&quot;/personal_blog/images/copied_from_nb/images/pycharm-image-name.png&quot; alt=&quot;Docker Python Interpreter settings&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Dopo aver confermato la configurazione, aspettiamo che finisca di indicizzare, e lanciamo &lt;code&gt;run.py&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CUDA isn't available :(&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Raggiungiamo questo risultato perchè non abbiamo specificato l'uso di GPU con Docker nella configurazione di Lancio/Debug ma è facile sistemare questo problema.&lt;br /&gt;
Apriamo la configurazione auto-generata e aggiungiamo &lt;code&gt;--gpus all&lt;/code&gt; alla fine delle impostazioni del container Docker.
Dovresti finire con qualcosa del genere:&lt;br /&gt;
&lt;img src=&quot;/personal_blog/images/copied_from_nb/images/pycharm-docker-container-settings.png&quot; alt=&quot;PyCharm Docker container settings&quot; /&gt;&lt;br /&gt;
Conferma la configurazione e rilanciala, CUDA ora dovrebbe essere disponibile.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Impostare-Visual-Studio-Code&quot;&gt;Impostare Visual Studio Code&lt;a class=&quot;anchor-link&quot; href=&quot;#Impostare-Visual-Studio-Code&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Userò le &lt;a href=&quot;https://code.visualstudio.com/docs/remote/remote-overview&quot;&gt;estensioni per lo Sviluppo Remoto di Visual Studio Code&lt;/a&gt; per impostare lo sviluppo con Docker.&lt;br /&gt;
Quindi come primo passo installiamo il pacchetto di estensioni &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack&quot;&gt;Remote Development extension pack&lt;/a&gt; ed apriamo la cartella del progetto.&lt;/p&gt;
&lt;p&gt;Usiamo il comando &lt;strong&gt;Add Development Container Configuration Files&lt;/strong&gt; dalla palette dei comandi di Visual Studio Code e scegliamo di usare il nostro &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Un file &lt;code&gt;devcontainer.json&lt;/code&gt; verrà creato in una cartella &lt;code&gt;.devcontainer&lt;/code&gt;.&lt;br /&gt;
Questo file avrà un contenuto simile a questo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;details,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;https://aka.ms/vscode-remote/devcontainer.json&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;file&amp;#39;s&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;README&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;at:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;https://github.com/microsoft/vscode-dev-containers/tree/v&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.128&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/containers/docker-existing-dockerfile&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Existing Dockerfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Sets&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;instead&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;.devcontainer&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;folder.&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;dockerFile&amp;#39;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;aren&amp;#39;t&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;standard&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;Dockerfile&amp;#39;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;filename.&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;dockerFile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../Dockerfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*default*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;specific&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;settings.json&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;create.&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;terminal.integrated.shell.linux&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;IDs&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;extensions&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;installed&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;created.&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;forwardPorts&amp;#39;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ports&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;locally.&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;forwardPorts&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Uncomment&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;created&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;installing&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;curl.&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;postCreateCommand&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;apt-get update &amp;amp;&amp;amp; apt-get install -y curl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Uncomment&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ptrace-based&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;debugger&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;C++,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Go,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Rust&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;runArgs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;--cap-add=SYS_PTRACE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;--security-opt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;seccomp=unconfined&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Uncomment&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Docker&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;CLI&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;See&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;https://aka.ms/vscode-remote/samples/docker-from-docker.&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;mounts&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Uncomment&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;non-root&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;user.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;See&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;https://aka.ms/vscode-remote/containers/non-root.&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;remoteUser&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vscode&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparirà un pop-up per riaprire il progetto nel container.&lt;br /&gt;
Prima di procedere dobbiamo scegliere che estensioni usare per lo sviluppo nel container e permettere l'uso delle GPU a Docker.&lt;br /&gt;
Andiamo quindi nel tab delle estensioni, cerchiamo le estensioni che ci servono e facendo click con il tasto destro sull'estensione che ci interessa scegliamo &lt;code&gt;Add to devcontainer.json&lt;/code&gt; per aggiungerla alla configurazione.&lt;/p&gt;
&lt;p&gt;Ora dobbiamo aggiungere una chiave &lt;code&gt;runArgs&lt;/code&gt; per usare le GPU e saremo pronti per lo sviluppo.&lt;br /&gt;
Escludendo i commenti il nostro file &lt;code&gt;devcontainer.json&lt;/code&gt; assomiglierà a questo&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Existing Dockerfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;dockerFile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../Dockerfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;terminal.integrated.shell.linux&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;ms-python.python&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;added!&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;runArgs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;--gpus=all&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ora dalla palette dei comandi possiamo scegliere &lt;code&gt;Rebuild and Reopen in Container&lt;/code&gt; ed il nostro ambiente di sviluppo sarà pronto dopo il caricamento!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Conclusione&quot;&gt;Conclusione&lt;a class=&quot;anchor-link&quot; href=&quot;#Conclusione&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ora hai un semplice ambiente di sviluppo configurato nella tua IDE basato su una tua immagine Docker con supporto alla GPU.&lt;br /&gt;
Tutto ciò che ti rimane da fare è personalizzare l'ambiente per le necessità del tuo progetto e divertirti!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Docker-based Python development with CUDA support on PyCharm and/or Visual Studio Code</title><link href="https://gregorysech.github.io/personal_blog/docker/cuda/python/vscode/pycharm/tutorial/2020/08/11/en-vscode-pycharm-docker-devbox.html" rel="alternate" type="text/html" title="Docker-based Python development with CUDA support on PyCharm and/or Visual Studio Code" /><published>2020-08-11T00:00:00-05:00</published><updated>2020-08-11T00:00:00-05:00</updated><id>https://gregorysech.github.io/personal_blog/docker/cuda/python/vscode/pycharm/tutorial/2020/08/11/en-vscode-pycharm-docker-devbox</id><content type="html" xml:base="https://gregorysech.github.io/personal_blog/docker/cuda/python/vscode/pycharm/tutorial/2020/08/11/en-vscode-pycharm-docker-devbox.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-08-11-en-vscode-pycharm-docker-devbox.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;Introduction&lt;a class=&quot;anchor-link&quot; href=&quot;#Introduction&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Setting up a development environment is not easy if you are inexperienced, especially if a lot of technologies you wish to learn are involved.&lt;br /&gt;
This tutorial is aimed to show you how to setup a basic Docker-based Python development environment with CUDA support in PyCharm or Visual Studio Code.&lt;/p&gt;
&lt;h3 id=&quot;Disclaimers&quot;&gt;Disclaimers&lt;a class=&quot;anchor-link&quot; href=&quot;#Disclaimers&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;At the time of writing &lt;strong&gt;I was unable to use CUDA inside of Docker in Windows 10 Home&lt;/strong&gt; (even with the Insider build) so this tutorial has been implemented with &lt;strong&gt;Linux&lt;/strong&gt; in mind even though there's basically nothing that is platform specific.&lt;/li&gt;
&lt;li&gt;Using Docker as a remote Python interpreter with PyCharm is possible only with the Professional edition.&lt;/li&gt;
&lt;li&gt;I will assume that you already installed &lt;a href=&quot;https://www.docker.com/get-started&quot;&gt;Docker&lt;/a&gt; on your machine. &lt;/li&gt;
&lt;li&gt;I will assume that you already installed &lt;a href=&quot;https://developer.nvidia.com/cuda-toolkit&quot;&gt;CUDA&lt;/a&gt; on your machine. If you are still setting up your Linux machine and you are not willing to research much about it I usually recommend &lt;a href=&quot;https://pop.system76.com/&quot;&gt;Pop!_OS&lt;/a&gt;. In &lt;a href=&quot;https://support.system76.com/articles/cuda/&quot;&gt;this article&lt;/a&gt; you can find how to setup CUDA and cuDNN very easily on their platform. The article also provides instructions to use their packages on Ubuntu.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Project-structure&quot;&gt;Project structure&lt;a class=&quot;anchor-link&quot; href=&quot;#Project-structure&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I'm just using 3 files in this toy project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Dockerfile&lt;/code&gt; to generate the container.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;requirements.txt&lt;/code&gt; file that contains the dependencies of the project.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;single run.py&lt;/code&gt; file that contains some code to run.
Obviously your personal project will most likely be more complex, you may use a different method for dependency management and you might also use a &lt;code&gt;docker-compose.yaml&lt;/code&gt; file but for the sake of getting my point through that is pointless complexity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Dockerfile&quot;&gt;Dockerfile&lt;a class=&quot;anchor-link&quot; href=&quot;#Dockerfile&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For an article more focused on Docker and Dockerfiles I recommend the &lt;a href=&quot;https://medium.com/codingthesmartway-com-blog/docker-beginners-guide-part-1-images-containers-6f3507fffc98&quot;&gt;Docker Beginner's Guide&lt;/a&gt;.&lt;br /&gt;
Here follows our Dockerfile and a brief explanation&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nvidia/cuda:10.2-devel&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Miniconda install copy-pasted from Miniconda&amp;#39;s own Dockerfile reachable &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# at: https://github.com/ContinuumIO/docker-images/blob/master/miniconda3/debian/Dockerfile&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; PATH /opt/conda/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; apt-get update --fix-missing &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    apt-get install -y wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    apt-get clean

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    /bin/bash ~/miniconda.sh -b -p /opt/conda &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    rm ~/miniconda.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    /opt/conda/bin/conda clean -tipsy &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;. /opt/conda/etc/profile.d/conda.sh&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;conda activate base&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    find /opt/conda/ -follow -type f -name &lt;span class=&quot;s1&quot;&gt;&amp;#39;*.a&amp;#39;&lt;/span&gt; -delete &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    find /opt/conda/ -follow -type f -name &lt;span class=&quot;s1&quot;&gt;&amp;#39;*.js.map&amp;#39;&lt;/span&gt; -delete &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    /opt/conda/bin/conda clean -afy

&lt;span class=&quot;c&quot;&gt;# Project setup&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /code&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt; requirements.txt .

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; pip install -r requirements.txt

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt; . .

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./run.py&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In layman's terms a &lt;code&gt;Dockerfile&lt;/code&gt; describes a procedure to generate a Docker image that is than used to create Docker containers. This &lt;code&gt;Dockerfile&lt;/code&gt; builds on top of the &lt;code&gt;nvidia/cuda:10.2-devel&lt;/code&gt; &lt;a href=&quot;https://hub.docker.com/r/nvidia/cuda&quot;&gt;image made available in DockerHub&lt;/a&gt; directly by NVIDIA.&lt;br /&gt;
&lt;code&gt;nvidia/cuda:10.2-devel&lt;/code&gt; is a development image with the CUDA 10.2 toolkit already installed.&lt;br /&gt;
Now just need to install what's needed for Python development and setup our project.&lt;/p&gt;
&lt;p&gt;In the middle section of the &lt;code&gt;Dockerfile&lt;/code&gt; there is a Miniconda3 installation. I decided to use Miniconda instead of just using Python because it's my go-to platform for most of my projects. We are leveraging &lt;strong&gt;none&lt;/strong&gt; of Miniconda capabilities so it is kind of overkill. Swapping out Miniconda with a vanilla installation of Python in the &lt;code&gt;Dockerfile&lt;/code&gt; is left to the reader as an exercise (do not panic, just use the same commands you would use on a new Ubuntu box).&lt;/p&gt;
&lt;p&gt;The last section is about the project setup, we are just installing the dependencies and copying all the files inside the image work directory and choosing the command to launch when &lt;code&gt;docker run&lt;/code&gt; is called without a specified command.&lt;/p&gt;
&lt;p&gt;To build the Docker image just navigate with your shell of choice to the path containing the &lt;code&gt;Dockerfile&lt;/code&gt; and run:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker build -t &amp;lt;image_name&amp;gt; .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate the Docker image as described by the configuration and give it the name &lt;code&gt;image_name&lt;/code&gt;. If in the name no tag is specified &lt;strong&gt;latest&lt;/strong&gt; is used as a default. To specify the tag just write it after a colon.&lt;br /&gt;
I will use the name &lt;code&gt;pytorch-development-box&lt;/code&gt; for the image in the rest of the tutorial.&lt;/p&gt;
&lt;h3 id=&quot;requirements.txt&quot;&gt;requirements.txt&lt;a class=&quot;anchor-link&quot; href=&quot;#requirements.txt&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I'm using only Pytorch and Torchvision as the dependencies for this project. I use those packages a lot and I will use their CUDA availability method to check if everything is working. So the content of my &lt;code&gt;requirements.txt&lt;/code&gt; is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;torch
torchvision&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;run.py&quot;&gt;run.py&lt;a class=&quot;anchor-link&quot; href=&quot;#run.py&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;My Python file is quite simple, I'm just checking if CUDA is available or not.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch.cuda&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;CUDA is available :D&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;CUDA isn&amp;#39;t available :(&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Setting-up-PyCharm&quot;&gt;Setting up PyCharm&lt;a class=&quot;anchor-link&quot; href=&quot;#Setting-up-PyCharm&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Using a remote Python interpreter from Docker is available only on PyCharm Professional. So, let's see how to setup it up.&lt;/p&gt;
&lt;p&gt;Once you've built your Docker image and opened your project folder in PyCharm navigate to &lt;strong&gt;File &amp;gt; Settings &amp;gt; Project &amp;gt; Python Interpreter&lt;/strong&gt;.&lt;br /&gt;
You should see something like this:&lt;br /&gt;
&lt;img src=&quot;/personal_blog/images/copied_from_nb/images/pycharm-interpreter.png&quot; alt=&quot;Python Interpreter settings&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now click on the little gear near the top-right and add a new Python interpreter.&lt;br /&gt;
Here you will need to select &lt;strong&gt;Docker&lt;/strong&gt; and choose the image name you selected before in the drop-down menu called &lt;strong&gt;Image name&lt;/strong&gt; like so:
&lt;img src=&quot;/personal_blog/images/copied_from_nb/images/pycharm-image-name.png&quot; alt=&quot;Docker Python Interpreter settings&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After this configuration is confirmed, wait for the indexing to finish, and try running &lt;code&gt;run.py&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CUDA isn't available :(&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point we didn't configure the Run/Debug configuration to have Docker use the GPU but that can be quickly fixed.&lt;br /&gt;
Open the auto-generated Run/Debug configuration and add &lt;code&gt;--gpus all&lt;/code&gt; at the end of the Docker container settings.&lt;br /&gt;
You should end up with something like this:&lt;br /&gt;
&lt;img src=&quot;/personal_blog/images/copied_from_nb/images/pycharm-docker-container-settings.png&quot; alt=&quot;PyCharm Docker container settings&quot; /&gt;&lt;br /&gt;
Confirm this configuration and run it, CUDA should result available now!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Setting-up-Visual-Studio-Code&quot;&gt;Setting up Visual Studio Code&lt;a class=&quot;anchor-link&quot; href=&quot;#Setting-up-Visual-Studio-Code&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I will rely on the new &lt;a href=&quot;https://code.visualstudio.com/docs/remote/remote-overview&quot;&gt;Remote Development extensions for Visual Studio Code&lt;/a&gt; to setup development through Docker.&lt;br /&gt;
The first step will be installing the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack&quot;&gt;Remote Development extension pack&lt;/a&gt; and opening the project folder.&lt;/p&gt;
&lt;p&gt;Use the &lt;strong&gt;Add Development Container Configuration Files&lt;/strong&gt; command from the Visual Studio command palette.&lt;br /&gt;
Choose to use your own Dockerfile.&lt;/p&gt;
&lt;p&gt;At this point a &lt;code&gt;devcontainer.json&lt;/code&gt; file will be created into a &lt;code&gt;.devcontainer&lt;/code&gt; directory and it will look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;details,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;https://aka.ms/vscode-remote/devcontainer.json&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;file&amp;#39;s&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;README&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;at:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;https://github.com/microsoft/vscode-dev-containers/tree/v&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.128&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/containers/docker-existing-dockerfile&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Existing Dockerfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Sets&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;instead&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;.devcontainer&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;folder.&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;dockerFile&amp;#39;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;aren&amp;#39;t&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;standard&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;Dockerfile&amp;#39;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;filename.&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;dockerFile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../Dockerfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*default*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;specific&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;settings.json&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;create.&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;terminal.integrated.shell.linux&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;IDs&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;extensions&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;installed&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;created.&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;forwardPorts&amp;#39;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ports&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;locally.&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;forwardPorts&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Uncomment&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;created&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;installing&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;curl.&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;postCreateCommand&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;apt-get update &amp;amp;&amp;amp; apt-get install -y curl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Uncomment&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ptrace-based&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;debugger&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;C++,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Go,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Rust&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;runArgs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;--cap-add=SYS_PTRACE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;--security-opt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;seccomp=unconfined&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Uncomment&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Docker&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;CLI&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;container.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;See&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;https://aka.ms/vscode-remote/samples/docker-from-docker.&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;mounts&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Uncomment&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;non-root&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;user.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;See&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;https://aka.ms/vscode-remote/containers/non-root.&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;remoteUser&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vscode&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A prompt to reopen the folder in the container will pop-up.&lt;br /&gt;
Before doing so we just need to select some extensions to use while developing in the container.&lt;br /&gt;
Go to the extensions tab, browse for the extensions you need and you can right click and select &lt;code&gt;Add to devcontainer.json&lt;/code&gt; to add them to the configuration.&lt;/p&gt;
&lt;p&gt;Now we just need to add a &lt;code&gt;runArgs&lt;/code&gt; key for enabling the GPU and we will be ready to start development.&lt;br /&gt;
Minus the comments you should end up with something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Existing Dockerfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;dockerFile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../Dockerfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;terminal.integrated.shell.linux&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;ms-python.python&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;added!&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;runArgs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;--gpus=all&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now from the command palette we can &lt;code&gt;Rebuild and Reopen in Container&lt;/code&gt; and we will be ready to go!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;Conclusion&lt;a class=&quot;anchor-link&quot; href=&quot;#Conclusion&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now you have quite a basic development environment configured in your IDE that is based on your own Docker image and all of this with GPU support.&lt;br /&gt;
All that is left is to customise it to fit your project needs and start having fun!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Starting my adventure with fastpages.</title><link href="https://gregorysech.github.io/personal_blog/introduction/fastpages/jupyter/2020/04/19/Starting-my-adventure-with-fastpages.html" rel="alternate" type="text/html" title="Starting my adventure with fastpages." /><published>2020-04-19T00:00:00-05:00</published><updated>2020-04-19T00:00:00-05:00</updated><id>https://gregorysech.github.io/personal_blog/introduction/fastpages/jupyter/2020/04/19/Starting-my-adventure-with-fastpages</id><content type="html" xml:base="https://gregorysech.github.io/personal_blog/introduction/fastpages/jupyter/2020/04/19/Starting-my-adventure-with-fastpages.html">&lt;h1 id=&quot;about-me-this-blog-and-i&quot;&gt;About me, this blog and I&lt;/h1&gt;

&lt;p&gt;My name is Gregory Sech, currently I’m a Computer Science student at Ca’Foscari 
University of Venice pursuing a Data Science curriculum.&lt;br /&gt;
During the COVID-19 pandemic I’ve had time to ponder quite a lot about what my 
life was leading to and what mistakes I did and what I needed to change about 
my mindset to have a positive impact on this world.&lt;br /&gt;
I do not have the presumption to being able to change the world however I do 
belive that I am not doing enough, especially I never really wanted to share 
my thoughts and my experiences to others. &lt;br /&gt;
I decided to start this blog to share some experiences, it will not always be 
about Data Science, heck, it might take a while before the first “real” Data
Science post to be published. I’d like this blog to be a kind of a journal where
I will share with whoever finds this fragments of my experiences and thoughts.&lt;/p&gt;

&lt;h1 id=&quot;fastpages-a-choice-of-laziness-procrastination-and-actions&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fastpages&lt;/code&gt;: a choice of laziness, procrastination and Actions.&lt;/h1&gt;

&lt;p&gt;I’m lazy and I will probably always be.&lt;br /&gt;
My laziness is at the core of my passion for Computer Science.&lt;br /&gt;
I really didn’t want to write code or become an expert in CI/CD to integrate 
Jupyter Notebooks in my blog, also I didn’t want to create a conversion and 
embedding process from scratch.&lt;br /&gt;
While I was researching how to use GitHub Actions to automatically export them 
and commit the result in a different repository I came across &lt;code class=&quot;highlighter-rouge&quot;&gt;fastpages&lt;/code&gt; and 
looked like a perfect fit.&lt;br /&gt;
Obviously I had to procrastinate a little before getting on board with the idea 
so I watched the third movie of the Millenium saga while chatting with friends 
over Discord, played some videogames and then went to sleep. All of this 
yesterday.&lt;br /&gt;
Today I woke up quite early and unable to sleep I decided of rolling up my 
sleeves and starting to integrate this bad boy.&lt;/p&gt;

&lt;h1 id=&quot;my-first-hour-or-so-with-fastpages&quot;&gt;My first hour or so with &lt;code class=&quot;highlighter-rouge&quot;&gt;fastpages&lt;/code&gt;.&lt;/h1&gt;
&lt;p&gt;My first half an hour were pretty simple, I’ve ended reading most of the 
readme about &lt;code class=&quot;highlighter-rouge&quot;&gt;fastpages&lt;/code&gt; and discovered that to use it locally I had to install
&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;, instruments I’m familiar with thankfully.&lt;br /&gt;
So on my terminal I installed and added myself to the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; group to use 
that without &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; privileges.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker.io
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gpasswd &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; docker
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This and rebooting the machine did the trick.&lt;br /&gt;
As described by the documentation I created a new GitHub repository using the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;fastpages&lt;/code&gt; template followed the initialization PR instructions to setup the 
deployment keys and discovered that I had to make the repository public to have 
free access to GitHub Pages, fair enough.&lt;br /&gt;
Now I’ve cloned the repository locally and started the website with &lt;code class=&quot;highlighter-rouge&quot;&gt;make server&lt;/code&gt;
to start editing the website.&lt;br /&gt;
I’ve got some problem with my first markdown post but I discovered that I 
forgot to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;layout: post&lt;/code&gt; directive to the post &lt;code class=&quot;highlighter-rouge&quot;&gt;Front matter&lt;/code&gt;. &lt;br /&gt;
I’m quite happy with the start of this process, it was mostly painless, I’ll 
just customize a little more the blog and then publish everything.&lt;br /&gt;
If I do not procrastinate too much I hope to write about the publishing process
in the next post.&lt;/p&gt;</content><author><name></name></author><summary type="html">About me, this blog and I</summary></entry><entry><title type="html">First post up, Nice.</title><link href="https://gregorysech.github.io/personal_blog/github-pages/2020/04/19/First-post-up-Nice.html" rel="alternate" type="text/html" title="First post up, Nice." /><published>2020-04-19T00:00:00-05:00</published><updated>2020-04-19T00:00:00-05:00</updated><id>https://gregorysech.github.io/personal_blog/github-pages/2020/04/19/First-post-up-Nice</id><content type="html" xml:base="https://gregorysech.github.io/personal_blog/github-pages/2020/04/19/First-post-up-Nice.html">&lt;h1 id=&quot;post-publishing-and-moments-of-panic&quot;&gt;Post publishing and moments of panic.&lt;/h1&gt;

&lt;p&gt;So, after doing some little personalization (basically some pruning and setting 
up the About me section) it’s time to make history.&lt;br /&gt;
Git add, commit, push and now we wait for the deploy actions to do their job.&lt;br /&gt;
After letting out my cat I notice that the Actions are all green!&lt;br /&gt;
YES, success!&lt;br /&gt;
I rush to click on the link in the README and 404, page not found :(&lt;br /&gt;
Panic ensures. What did I do wrong? &lt;br /&gt;
Is it a browser caching problem? CTRL+shift+R, nope :/&lt;br /&gt;
Is it because the repository was originally 
private?&lt;br /&gt;
Searching mechanism settles in and I stumple upon a Github Community post with 
a similar problem, hopefully someone else had found a simple solution.&lt;br /&gt;
Someone advices to choose a Jekyll theme however I do not have a selector like 
in their screenshot I only have the Source brench dropdown available and with 
the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch selected.&lt;br /&gt;
Let’s check what that branch contains, looks like a processed static website, 
at least the website build Action is working.&lt;br /&gt;
I’mma try changing the branch and then changing it back: the good, old, shut 
down and restart.&lt;br /&gt;
Kinda happy that this worked however the prespective of doing this everytime is 
daunting.&lt;/p&gt;

&lt;h1 id=&quot;so-what-now&quot;&gt;So, what now?&lt;/h1&gt;

&lt;p&gt;This is kind of the first time blogging so, to tranquilize myself, I’ll expose a
kind of roadmap of topics that will be written about.&lt;br /&gt;
I really enjoy studying data analysis, both the theoretical part and the 
practical component.&lt;br /&gt;
So my “serious” posts will start with an introduction of the concepts of data 
analysis. I cannot assure how many personal posts I will publish before the 
first technical one but I hope not many.&lt;br /&gt;
I have no expectencies about who will read this blog so I will try to start from
some pretty basic concepts of statistics and machine learning.&lt;br /&gt;
This will be a pretty useful experience also to review my knowledge before the 
start of the next academic year.&lt;/p&gt;</content><author><name></name></author><summary type="html">Post publishing and moments of panic.</summary></entry></feed>