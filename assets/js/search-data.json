{
  
    
        "post0": {
            "title": "Usare Docker per sviluppare in Python con CUDA in PyCharm e/o Visual Studio Code",
            "content": "Introduzione . Mettere in piedi un ambiente di sviluppo non è facile se si è inesperti, specialmente se molte tecnologie che si stanno ancora imparando sono coinvolte. Questo tutorial ti mostrerà come usare PyCharm o Visual Studio Code per usare una immagine Docker per sviluppare in Python con supporto a CUDA. . Disclaimers . Durante la stesura del tutorial non sono stato in grado di usare CUDA con Docker in Windows 10 Home (neanche con l&#39;Insider build), quindi è stato pensato con Linux in mente anche se non c&#39;è praticamente nulla di specifico ad una singola piattaforma. | Usare Docker come un interprete Python remoto in PyCharm è possibile solo con l&#39;edizione Professional. | Suppongo che Docker sia già installato correttamente sulla tua macchina. | Assumo anche che CUDA sia già installato sulla tua macchina. Se stai ancora configurando la tua macchina con Linux e non hai voglia di spendere troppo tempo a fare ricerche consiglio fortemente la distribuzione Pop!_OS. In questo articolo viene spiegato come installare CUDA e cuDNN molto facilmente sulla loro piattaforma. Inoltre spiegano anche come installare i loro pacchetti su Ubuntu. | . Struttura del progetto . Userò solamente 3 file in questo progettino: . Un Dockerfile per generare il container Docker. | Un file requirements.txt che conterrà le dipendenze Python del progetto. | Uno script run.py che contiene il codice da eseguire. | . Ovviamente il tuo progetto sarà più complesso, inoltre è probabile che userai un metodo differente per gestire le tue dipendenze o che vorrai usare docker-compose ma queste sono complessità che sviano dall&#39;obiettivo del tutorial. . Dockerfile . Per un articolo più specializzato su Docker ed i Dockerfile consiglio Docker Beginner&#39;s Guide. Segue il Dockerfile del progetto ed una spiegazione delle sue parti: . FROM nvidia/cuda:10.2-devel # Miniconda install copy-pasted from Miniconda&#39;s own Dockerfile reachable # at: https://github.com/ContinuumIO/docker-images/blob/master/miniconda3/debian/Dockerfile ENV PATH /opt/conda/bin:$PATH RUN apt-get update --fix-missing &amp;&amp; apt-get install -y wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion &amp;&amp; apt-get clean RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh &amp;&amp; /bin/bash ~/miniconda.sh -b -p /opt/conda &amp;&amp; rm ~/miniconda.sh &amp;&amp; /opt/conda/bin/conda clean -tipsy &amp;&amp; ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh &amp;&amp; echo &quot;. /opt/conda/etc/profile.d/conda.sh&quot; &gt;&gt; ~/.bashrc &amp;&amp; echo &quot;conda activate base&quot; &gt;&gt; ~/.bashrc &amp;&amp; find /opt/conda/ -follow -type f -name &#39;*.a&#39; -delete &amp;&amp; find /opt/conda/ -follow -type f -name &#39;*.js.map&#39; -delete &amp;&amp; /opt/conda/bin/conda clean -afy # Project setup WORKDIR /code COPY requirements.txt . RUN pip install -r requirements.txt COPY . . CMD [&quot;python&quot;, &quot;./run.py&quot;] . In parole povere un Dockerfile descrive che procedura usare per generare un&#39;immagine Docker che poi viene usata per creare un container. Il nostro specifico Dockerfile si basa sull&#39;immagine nvidia/cuda:10.2-devel che è resa pubblicamente disponibile su DockerHub direttamente da NVIDIA. nvidia/cuda:10.2-devel è un&#39;immagine di sviluppo con il toolkit CUDA versione 10.2 già installata. A questo punto ci mancano gli strumenti necessari per lo sviluppo Python e preparare il nostro progetto. . La sezione centrale del file contienen l&#39;installazione di Miniconda3. Ho deciso di usare Miniconda al posto della classica installazione di Python perché è la mia piattaforma di riferimento per la maggior parte dei miei progetti. Purtroppo stiamo stiamo usando nessuna delle capacità di Miniconda quindi è un po&#39; sprecato. Sostituire Miniconda con un&#39;installazione vanilla di Python nel Dockerfile è lasciato al lettore come esercizio (ma nessuna paura, basta usare gli stessi comandi che useresti in una nuova installazione di Ubuntu). . In fine nell&#39;ultima sezione faremo il setup del nostro progetto, nello specifico installiamo le dipendenze necessarie e copiamo tutti i file del progetto nella cartella di lavoro dell&#39;immagine. Concludiamo specificando che comando va lanciato se non se ne specifica uno quando si chiama docker run. . Ora che il nostro Dockerfile è pronto dobbiamo solo costruire l&#39;immagine. Una volta che ci troviamo con la shell nella stessa cartella del Dockerfile dobbiamo solo lanciare: . docker build -t &lt;image_name&gt; . . Questo genererà l&#39;immagine Docker come descritto da configurazione e le darà il nome image_name. Se nel nome non è specificato nessun tag latest verrà usato come default. Per specificare il tag basta scriverlo dopo i due punti (:). Io userò il nome pytorch-development-box per l&#39;immagine. . requirements.txt . Come dipendenze per il progetto userò PyTorch e Torchvision. Sono pacchetti che uso molto spesso e userò un metodo di PyTorch per verificare la disponibilità di CUDA. Quindi il contenuto del mio file requirements.txt è: . torch torchvision . run.py . Il mio script Python è molto semplice, verifico solo se CUDA è disponibile o meno. . import torch.cuda if torch.cuda.is_available(): print(&quot;CUDA is available :D&quot;) else: print(&quot;CUDA isn&#39;t available :(&quot;) . Impostare PyCharm . Come da disclaimer faccio nuovamente presente che usare Docker come interprete Python remoto è possibile solo nell&#39;edizione Professional di PyCharm. Detto questo vediamo come configurarlo. . Una volta creata l&#39;immagine Docker apriamo la cartella del nostro progetto in PyCharm. Dopodichè navighiamo File &gt; Settings &gt; Project &gt; Python Interpreter. Dovresti vedere una schermata come questa: . Ora facciamo click sull&#39;ingranaggio in alto a destra ed aggiungiamo un nuovo interprete. Qua dobbiamo selezionare Docker e scegliere dal drop-down chiamato Image name l&#39;immagine che abbiamo creato in precedenza, così: . Dopo aver confermato la configurazione, aspettiamo che finisca di indicizzare, e lanciamo run.py. . CUDA isn&#39;t available :( . Raggiungiamo questo risultato perchè non abbiamo specificato l&#39;uso di GPU con Docker nella configurazione di Lancio/Debug ma è facile sistemare questo problema. Apriamo la configurazione auto-generata e aggiungiamo --gpus all alla fine delle impostazioni del container Docker. Dovresti finire con qualcosa del genere: Conferma la configurazione e rilanciala, CUDA ora dovrebbe essere disponibile. . Impostare Visual Studio Code . Userò le estensioni per lo Sviluppo Remoto di Visual Studio Code per impostare lo sviluppo con Docker. Quindi come primo passo installiamo il pacchetto di estensioni Remote Development extension pack ed apriamo la cartella del progetto. . Usiamo il comando Add Development Container Configuration Files dalla palette dei comandi di Visual Studio Code e scegliamo di usare il nostro Dockerfile. . Un file devcontainer.json verrà creato in una cartella .devcontainer. Questo file avrà un contenuto simile a questo: . // For format details, see https://aka.ms/vscode-remote/devcontainer.json or this file&#39;s README at: // https://github.com/microsoft/vscode-dev-containers/tree/v0.128.0/containers/docker-existing-dockerfile { &quot;name&quot;: &quot;Existing Dockerfile&quot;, // Sets the run context to one level up instead of the .devcontainer folder. &quot;context&quot;: &quot;..&quot;, // Update the &#39;dockerFile&#39; property if you aren&#39;t using the standard &#39;Dockerfile&#39; filename. &quot;dockerFile&quot;: &quot;../Dockerfile&quot;, // Set *default* container specific settings.json values on container create. &quot;settings&quot;: { &quot;terminal.integrated.shell.linux&quot;: null }, // Add the IDs of extensions you want installed when the container is created. &quot;extensions&quot;: [] // Use &#39;forwardPorts&#39; to make a list of ports inside the container available locally. // &quot;forwardPorts&quot;: [], // Uncomment the next line to run commands after the container is created - for example installing curl. // &quot;postCreateCommand&quot;: &quot;apt-get update &amp;&amp; apt-get install -y curl&quot;, // Uncomment when using a ptrace-based debugger like C++, Go, and Rust // &quot;runArgs&quot;: [ &quot;--cap-add=SYS_PTRACE&quot;, &quot;--security-opt&quot;, &quot;seccomp=unconfined&quot; ], // Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker. // &quot;mounts&quot;: [ &quot;source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind&quot; ], // Uncomment to connect as a non-root user. See https://aka.ms/vscode-remote/containers/non-root. // &quot;remoteUser&quot;: &quot;vscode&quot; } . Apparirà un pop-up per riaprire il progetto nel container. Prima di procedere dobbiamo scegliere che estensioni usare per lo sviluppo nel container e permettere l&#39;uso delle GPU a Docker. Andiamo quindi nel tab delle estensioni, cerchiamo le estensioni che ci servono e facendo click con il tasto destro sull&#39;estensione che ci interessa scegliamo Add to devcontainer.json per aggiungerla alla configurazione. . Ora dobbiamo aggiungere una chiave runArgs per usare le GPU e saremo pronti per lo sviluppo. Escludendo i commenti il nostro file devcontainer.json assomiglierà a questo . { &quot;name&quot;: &quot;Existing Dockerfile&quot;, &quot;context&quot;: &quot;..&quot;, &quot;dockerFile&quot;: &quot;../Dockerfile&quot;, &quot;settings&quot;: { &quot;terminal.integrated.shell.linux&quot;: null }, &quot;extensions&quot;: [ &quot;ms-python.python&quot; ], // This was added! &quot;runArgs&quot;: [ &quot;--gpus=all&quot; ] } . Ora dalla palette dei comandi possiamo scegliere Rebuild and Reopen in Container ed il nostro ambiente di sviluppo sarà pronto dopo il caricamento! . Conclusione . Ora hai un semplice ambiente di sviluppo configurato nella tua IDE basato su una tua immagine Docker con supporto alla GPU. Tutto ciò che ti rimane da fare è personalizzare l&#39;ambiente per le necessità del tuo progetto e divertirti! .",
            "url": "https://gregorysech.github.io/personal_blog/docker/cuda/python/vscode/pycharm/tutorial/italiano/italian/2020/08/12/it-vscode-pycharm-docker-devbox.html",
            "relUrl": "/docker/cuda/python/vscode/pycharm/tutorial/italiano/italian/2020/08/12/it-vscode-pycharm-docker-devbox.html",
            "date": " • Aug 12, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Docker-based Python development with CUDA support on PyCharm and/or Visual Studio Code",
            "content": "Introduction . Setting up a development environment is not easy if you are inexperienced, especially if a lot of technologies you wish to learn are involved. This tutorial is aimed to show you how to setup a basic Docker-based Python development environment with CUDA support in PyCharm or Visual Studio Code. . Disclaimers . At the time of writing I was unable to use CUDA inside of Docker in Windows 10 Home (even with the Insider build) so this tutorial has been implemented with Linux in mind even though there&#39;s basically nothing that is platform specific. | Using Docker as a remote Python interpreter with PyCharm is possible only with the Professional edition. | I will assume that you already installed Docker on your machine. | I will assume that you already installed CUDA on your machine. If you are still setting up your Linux machine and you are not willing to research much about it I usually recommend Pop!_OS. In this article you can find how to setup CUDA and cuDNN very easily on their platform. The article also provides instructions to use their packages on Ubuntu. | . Project structure . I&#39;m just using 3 files in this toy project: . A Dockerfile to generate the container. | A requirements.txt file that contains the dependencies of the project. | A single run.py file that contains some code to run. Obviously your personal project will most likely be more complex, you may use a different method for dependency management and you might also use a docker-compose.yaml file but for the sake of getting my point through that is pointless complexity. | . Dockerfile . For an article more focused on Docker and Dockerfiles I recommend the Docker Beginner&#39;s Guide. Here follows our Dockerfile and a brief explanation . FROM nvidia/cuda:10.2-devel # Miniconda install copy-pasted from Miniconda&#39;s own Dockerfile reachable # at: https://github.com/ContinuumIO/docker-images/blob/master/miniconda3/debian/Dockerfile ENV PATH /opt/conda/bin:$PATH RUN apt-get update --fix-missing &amp;&amp; apt-get install -y wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion &amp;&amp; apt-get clean RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh &amp;&amp; /bin/bash ~/miniconda.sh -b -p /opt/conda &amp;&amp; rm ~/miniconda.sh &amp;&amp; /opt/conda/bin/conda clean -tipsy &amp;&amp; ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh &amp;&amp; echo &quot;. /opt/conda/etc/profile.d/conda.sh&quot; &gt;&gt; ~/.bashrc &amp;&amp; echo &quot;conda activate base&quot; &gt;&gt; ~/.bashrc &amp;&amp; find /opt/conda/ -follow -type f -name &#39;*.a&#39; -delete &amp;&amp; find /opt/conda/ -follow -type f -name &#39;*.js.map&#39; -delete &amp;&amp; /opt/conda/bin/conda clean -afy # Project setup WORKDIR /code COPY requirements.txt . RUN pip install -r requirements.txt COPY . . CMD [&quot;python&quot;, &quot;./run.py&quot;] . In layman&#39;s terms a Dockerfile describes a procedure to generate a Docker image that is than used to create Docker containers. This Dockerfile builds on top of the nvidia/cuda:10.2-devel image made available in DockerHub directly by NVIDIA. nvidia/cuda:10.2-devel is a development image with the CUDA 10.2 toolkit already installed. Now just need to install what&#39;s needed for Python development and setup our project. . In the middle section of the Dockerfile there is a Miniconda3 installation. I decided to use Miniconda instead of just using Python because it&#39;s my go-to platform for most of my projects. We are leveraging none of Miniconda capabilities so it is kind of overkill. Swapping out Miniconda with a vanilla installation of Python in the Dockerfile is left to the reader as an exercise (do not panic, just use the same commands you would use on a new Ubuntu box). . The last section is about the project setup, we are just installing the dependencies and copying all the files inside the image work directory and choosing the command to launch when docker run is called without a specified command. . To build the Docker image just navigate with your shell of choice to the path containing the Dockerfile and run: . docker build -t &lt;image_name&gt; . . This will generate the Docker image as described by the configuration and give it the name image_name. If in the name no tag is specified latest is used as a default. To specify the tag just write it after a colon. I will use the name pytorch-development-box for the image in the rest of the tutorial. . requirements.txt . I&#39;m using only Pytorch and Torchvision as the dependencies for this project. I use those packages a lot and I will use their CUDA availability method to check if everything is working. So the content of my requirements.txt is: . torch torchvision . run.py . My Python file is quite simple, I&#39;m just checking if CUDA is available or not. . import torch.cuda if torch.cuda.is_available(): print(&quot;CUDA is available :D&quot;) else: print(&quot;CUDA isn&#39;t available :(&quot;) . Setting up PyCharm . Using a remote Python interpreter from Docker is available only on PyCharm Professional. So, let&#39;s see how to setup it up. . Once you&#39;ve built your Docker image and opened your project folder in PyCharm navigate to File &gt; Settings &gt; Project &gt; Python Interpreter. You should see something like this: . Now click on the little gear near the top-right and add a new Python interpreter. Here you will need to select Docker and choose the image name you selected before in the drop-down menu called Image name like so: . After this configuration is confirmed, wait for the indexing to finish, and try running run.py. . CUDA isn&#39;t available :( . At this point we didn&#39;t configure the Run/Debug configuration to have Docker use the GPU but that can be quickly fixed. Open the auto-generated Run/Debug configuration and add --gpus all at the end of the Docker container settings. You should end up with something like this: Confirm this configuration and run it, CUDA should result available now! . Setting up Visual Studio Code . I will rely on the new Remote Development extensions for Visual Studio Code to setup development through Docker. The first step will be installing the Remote Development extension pack and opening the project folder. . Use the Add Development Container Configuration Files command from the Visual Studio command palette. Choose to use your own Dockerfile. . At this point a devcontainer.json file will be created into a .devcontainer directory and it will look like this: . // For format details, see https://aka.ms/vscode-remote/devcontainer.json or this file&#39;s README at: // https://github.com/microsoft/vscode-dev-containers/tree/v0.128.0/containers/docker-existing-dockerfile { &quot;name&quot;: &quot;Existing Dockerfile&quot;, // Sets the run context to one level up instead of the .devcontainer folder. &quot;context&quot;: &quot;..&quot;, // Update the &#39;dockerFile&#39; property if you aren&#39;t using the standard &#39;Dockerfile&#39; filename. &quot;dockerFile&quot;: &quot;../Dockerfile&quot;, // Set *default* container specific settings.json values on container create. &quot;settings&quot;: { &quot;terminal.integrated.shell.linux&quot;: null }, // Add the IDs of extensions you want installed when the container is created. &quot;extensions&quot;: [] // Use &#39;forwardPorts&#39; to make a list of ports inside the container available locally. // &quot;forwardPorts&quot;: [], // Uncomment the next line to run commands after the container is created - for example installing curl. // &quot;postCreateCommand&quot;: &quot;apt-get update &amp;&amp; apt-get install -y curl&quot;, // Uncomment when using a ptrace-based debugger like C++, Go, and Rust // &quot;runArgs&quot;: [ &quot;--cap-add=SYS_PTRACE&quot;, &quot;--security-opt&quot;, &quot;seccomp=unconfined&quot; ], // Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker. // &quot;mounts&quot;: [ &quot;source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind&quot; ], // Uncomment to connect as a non-root user. See https://aka.ms/vscode-remote/containers/non-root. // &quot;remoteUser&quot;: &quot;vscode&quot; } . A prompt to reopen the folder in the container will pop-up. Before doing so we just need to select some extensions to use while developing in the container. Go to the extensions tab, browse for the extensions you need and you can right click and select Add to devcontainer.json to add them to the configuration. . Now we just need to add a runArgs key for enabling the GPU and we will be ready to start development. Minus the comments you should end up with something like this: . { &quot;name&quot;: &quot;Existing Dockerfile&quot;, &quot;context&quot;: &quot;..&quot;, &quot;dockerFile&quot;: &quot;../Dockerfile&quot;, &quot;settings&quot;: { &quot;terminal.integrated.shell.linux&quot;: null }, &quot;extensions&quot;: [ &quot;ms-python.python&quot; ], // This was added! &quot;runArgs&quot;: [ &quot;--gpus=all&quot; ] } . Now from the command palette we can Rebuild and Reopen in Container and we will be ready to go! . Conclusion . Now you have quite a basic development environment configured in your IDE that is based on your own Docker image and all of this with GPU support. All that is left is to customise it to fit your project needs and start having fun! .",
            "url": "https://gregorysech.github.io/personal_blog/docker/cuda/python/vscode/pycharm/tutorial/2020/08/11/en-vscode-pycharm-docker-devbox.html",
            "relUrl": "/docker/cuda/python/vscode/pycharm/tutorial/2020/08/11/en-vscode-pycharm-docker-devbox.html",
            "date": " • Aug 11, 2020"
        }
        
    
  
    
  
    
        ,"post3": {
            "title": "First post up, Nice.",
            "content": "Post publishing and moments of panic. . So, after doing some little personalization (basically some pruning and setting up the About me section) it’s time to make history. Git add, commit, push and now we wait for the deploy actions to do their job. After letting out my cat I notice that the Actions are all green! YES, success! I rush to click on the link in the README and 404, page not found :( Panic ensures. What did I do wrong? Is it a browser caching problem? CTRL+shift+R, nope :/ Is it because the repository was originally private? Searching mechanism settles in and I stumple upon a Github Community post with a similar problem, hopefully someone else had found a simple solution. Someone advices to choose a Jekyll theme however I do not have a selector like in their screenshot I only have the Source brench dropdown available and with the gh-pages branch selected. Let’s check what that branch contains, looks like a processed static website, at least the website build Action is working. I’mma try changing the branch and then changing it back: the good, old, shut down and restart. Kinda happy that this worked however the prespective of doing this everytime is daunting. . So, what now? . This is kind of the first time blogging so, to tranquilize myself, I’ll expose a kind of roadmap of topics that will be written about. I really enjoy studying data analysis, both the theoretical part and the practical component. So my “serious” posts will start with an introduction of the concepts of data analysis. I cannot assure how many personal posts I will publish before the first technical one but I hope not many. I have no expectencies about who will read this blog so I will try to start from some pretty basic concepts of statistics and machine learning. This will be a pretty useful experience also to review my knowledge before the start of the next academic year. .",
            "url": "https://gregorysech.github.io/personal_blog/github-pages/2020/04/19/First-post-up-Nice.html",
            "relUrl": "/github-pages/2020/04/19/First-post-up-Nice.html",
            "date": " • Apr 19, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a Computer Science with a Data Science curriculum student at Ca’Foscari University of Venice. I’ve worked for almost two years as a mobile developer using Flutter. This blog is not purely a technical one but is rather a journal of some of my life experiences that most of the time happen to be technology related. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gregorysech.github.io/personal_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gregorysech.github.io/personal_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}